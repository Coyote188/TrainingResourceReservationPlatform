/**
 * jquery.bootstrap.js Copyright (c) Kris Zhang <kris.newghost@gmail.com>
 * License: MIT
 * (https://github.com/newghost/bootstrap-jquery-plugin/blob/master/LICENSE)
 */
if (!String.prototype.format) {
	String.prototype.format = function() {
		var args = arguments;
		return this.replace(/{(\d+)}/g, function(match, number) {
			return typeof args[number] != "undefined" ? args[number] : match
		})
	}
}
(function($) {
	$.fn.dialog = function(options) {
		var self = this, $this = $(self), $body = $(document.body), $msgbox = $this.closest(".dialog");
		var modalDialogHtml = '';
		if(typeof(options.width) == 'undefined' || isNaN(options.width)) {
			modalDialogHtml = '<div class="modal-dialog">';
		} else {
			modalDialogHtml = '<div class="modal-dialog" style="width:'+options.width+'px">';
		}
		var modalFooterHtml = '<div class="modal-footer"></div>';
		if(typeof(options.clearFooter) == 'boolean') {
			if(options.clearFooter) {
				modalFooterHtml = '';
			}
		}
		var create = function() {
			var msghtml = ""
					+ '<div class="dialog modal jquery-bootstrap-dialog fade">'
					+ modalDialogHtml
					+ '<div class="modal-content">'
					+ '<div class="modal-header">'
					+ '<div class="jquery-bootstrap-dialog-close"></div>'
					+ '<h4 class="modal-title"></h4>'
					+ "</div>"
					+ '<div class="modal-body"></div>'
					+ modalFooterHtml
					+ "</div>"
					+ "</div>"
					+ '<div class="modal-backdrop fade" style="z-index:-1"></div>'
					+ "</div>";
			$msgbox = $(msghtml);
			$(document.body).append($msgbox);
			$msgbox.find(".modal-body").append($this)
		};
		var createButton = function() {
			var buttons = options.buttons || {}, $btnrow = $msgbox.find(".modal-footer");
			$btnrow.html("");
			for ( var button in buttons) {
				var btnObj = buttons[button], id = "", text = "", classed = "btn-default", click = "";
				if (btnObj.constructor == Object) {
					id = btnObj.id;
					text = btnObj.text;
					classed = btnObj.classed || classed;
					click = btnObj.click
				}
				if (btnObj.constructor == Function) {
					click = btnObj
				}
				$button = $('<button type="button" class="btn {1}">{0}</button>'.format(text, classed));
				id && $button.attr("id", id);
				if (click) {
					(function(click) {
						$button.click(function() {
							click.call(self)
						})
					})(click)
				}
				$btnrow.append($button)
			}
		};
		var show = function() {
			//$msgbox.show();
			$body.addClass("modal-open");
			$msgbox.modal('show');
		};
		var close = function() {
			$body.removeClass("modal-open");
			//$msgbox.hide();
			$msgbox.modal('hide');
		};
		if (options.constructor == Object) {
			if ($msgbox.size() < 1) {
				create()
			}
			createButton();
			$(".modal-title", $msgbox).html(options.title || "");
			$(".modal-header .jquery-bootstrap-dialog-close", $msgbox).click(function() {
				var closeHandler = options.onClose || close;
				closeHandler.call(self)
			});
			options.classed && $msgbox.addClass(options.classed);
			show()
		}
		if (options == "destroy") {
			close();
			$msgbox.remove()
		}
		if (options == "close") {
			close()
		}
		if (options == "open") {
			show()
		}
		return $this
	}
})(jQuery);
$.messager = function() {
	var alert = function(title, message) {
		var model = $.messager.model;
		if (arguments.length < 2) {
			message = title || "";
			title = "&nbsp;"
		}
		$("<div>" + message + "</div>").dialog({
			title : title,
			onClose : function() {
				$(this).dialog("destroy")
			},
			buttons : [ {
				text : model.ok,
				classed : "btn-success",
				click : function() {
					$(this).dialog("destroy")
				}
			} ]
		})
	};
	var confirm = function(title, message, callback) {
		var model = $.messager.model;
		$("<div>" + message + "</div>").dialog({
			title : title,
			onClose : function() {
				$(this).dialog("destroy")
			},
			buttons : [ {
				text : model.ok,
				classed : "btn-success",
				click : function() {
					$(this).dialog("destroy");
					callback && callback()
				}
			}, {
				text : model.cancel,
				click : function() {
					$(this).dialog("destroy")
				}
			} ]
		})
	};
	return {
		alert : alert,
		confirm : confirm
	}
}();
$.messager.model = {
	ok : "OK",
	cancel : "Cancel"
};
(function($) {
	$.fn.datagrid = function(method, options) {
		var self = this, selectedClass = "success", $this = $(this);
		var bindRows = function($rows) {
			var conf = $this.data("config"), selectChange = conf.selectChange, singleSelect = conf.singleSelect, edit = conf.edit;
			var selectHandler = function(e) {
				var $row = $(this), hasSelectedClass = $row
						.hasClass(selectedClass), idx = $("tbody tr", $this)
						.index($row), row = $this.data("rows")[idx] || {};
				singleSelect && $("tbody tr", $this).removeClass(selectedClass);
				$row.toggleClass(selectedClass);
				selectChange && selectChange(!hasSelectedClass, idx, row, $row)
			};
			(selectChange || typeof singleSelect != "undefined")
					&& $rows.click(selectHandler);
			var editHandler = function(e) {
				var $input = $(this), $row = $input.closest("tr"), idx = $(
						"tbody tr", $this).index($row), row = $this
						.data("rows")[idx]
						|| {}, name = $input.attr("name");
				name && (row[name] = $input.val())
			};
			edit && $rows.find("input").keyup(editHandler)
		};
		var getRow = function(columns, row, conf) {
			var trow = "<tr>";
			for ( var j = 0, m = columns[0].length; j < m; j++) {
				var column = columns[0][j], format = column.formatter, field = column.field, tip = column.tip, value = row[field], maxlength = column.maxlength, readonly = column.readonly;
				typeof value == "undefined" && (value = "");
				if (conf.edit) {
					maxlength = maxlength ? ' maxlength="{0}"'
							.format(column.maxlength) : "";
					readonly = readonly ? ' readonly="readonly"' : "";
					value = '<input name="{0}" value="{1}" class="form-control"{2}{3}/>'
							.format(column.field, value, maxlength, readonly)
				}
				value = format ? format(row[field], row) : value;
				trow = trow + "<td>" + value + "</td>"
			}
			trow += "</tr>";
			return trow
		};
		var getData = function(edit) {
			if (!options)
				return;
			var config = $this.data("config") || {}, columns = config.columns, rows = options.rows
					|| options;
			var body = "<tbody>";
			if (rows) {
				for ( var i = 0, l = rows.length; i < l; i++) {
					body += getRow(columns, rows[i], config)
				}
			}
			body += "</tbody>";
			$("tbody", $this).remove();
			$this.data("rows", rows).append(body);
			config.edit && $this.addClass("edit");
			bindRows($("tbody tr", $this))
		};
		if (method && method.constructor == Object) {
			var columns = method.columns;
			if (columns) {
				$("thead", $this).size() < 1 && $this.append("<thead></thead>");
				var header = "<tr>";
				for ( var i = 0, l = columns[0].length; i < l; i++) {
					var col = columns[0][i];
					header += "<th>" + (col.title || "") + "</th>"
				}
				header += "</tr>";
				$this.data("config", method);
				$("thead", $this).html(header)
			}
		}
		if (method == "loadData")
			getData();
		if (method == "getData") {
			return $this.data("rows")
		}
		if (method == "getConfig") {
			return $this.data("config")
		}
		if (method == "getColumns") {
			return $this.data("config").columns
		}
		if (method == "unselectRow") {
			typeof options != "undefined" ? $("tbody tr", $this).eq(options)
					.removeClass(selectedClass) : $("tbody tr", $this)
					.removeClass(selectedClass)
		}
		if (method == "updateRow") {
			var idx = options.index, conf = $this.data("config"), rows = $this
					.data("rows"), row = options.row, columns = conf.columns;
			if (rows) {
				row = $.extend(rows[idx], row);
				$this.data("rows", rows)
			}
			var $row = $(getRow(columns, row, conf));
			$("tbody tr", $this).eq(idx).after($row).remove();
			bindRows($row)
		}
		if (method == "getSelections") {
			var rows = $this.data("rows"), selRows = [];
			$("tbody tr", $this).each(function(idx) {
				$(this).hasClass(selectedClass) && selRows.push(rows[idx])
			});
			return selRows
		}
		if (method == "insertRow") {
			var idx = options.index || 0, row = options.row, conf = $this
					.data("config"), rows = $this.data("rows") || [];
			if (!conf || !row)
				return $this;
			var $rows = $("tbody tr", $this), $row = $(getRow(conf.columns,
					row, conf)), $tar = $rows.eq(idx);
			bindRows($row);
			$tar.size() ? $tar.before($row) : $("tbody", $this).append($row);
			rows.splice(idx, 0, row)
		}
		if (method == "deleteRow") {
			if (options > -1) {
				$("tbody tr", $this).eq(options).remove();
				var rows = $this.data("rows");
				rows.splice(options, 1)
			}
		}
		return $this
	}
})(jQuery);
(function($) {
	$.fn.tree = function(method, options) {
		var self = this, $this = $(self), pushFn = Array.prototype.push, icon_node = "glyphicon-file", icon_open = "glyphicon-folder-open", icon_close = "glyphicon-folder-close";
		var build = function(data, root, parentState) {
			var tree = [];
			!root && tree.push('<ul style="display:{0}">'.format(parentState == "close" ? "none" : "block"));
			data.forEach(function(node) {
						var children = node.children, id = node.id, state = node.state, attributes = node.attributes;
						tree.push("<li>");
						if (1) {
							var type = typeof children == "undefined" ? icon_node
									: state == "close" ? icon_close : icon_open;
							tree.push('<span class="glyphicon {0}"></span> '
									.format(type))
						}
						tree.push("<a{1}{2}{3}>{0}</a>".format(node.text,
								children ? " class='tree-node'" : "",
								id ? " data-id='{0}'".format(id) : "",
								attributes ? " data-attr='{0}'".format(JSON
										.stringify(attributes)) : ""));
						children
								&& pushFn.apply(tree, build(children, false,
										state));
						tree.push("</li>")
					});
			!root && tree.push("</ul>");
			return tree
		};
		var bind = function() {
			$("span.glyphicon-folder-open, span.glyphicon-folder-close", $this)
					.click(
							function(e) {
								var $icon = $(this), $children = $icon.closest(
										"li").children("ul");
								if ($icon.hasClass(icon_close)) {
									$icon.removeClass(icon_close).addClass(
											icon_open);
									$children.show()
								} else {
									$icon.removeClass(icon_open).addClass(
											icon_close);
									$children.hide()
								}
							})
		};
		if (method && method.constructor == Object) {
			var data = method.data;
			if (data && data.constructor == Array) {
				var htmlArr = build(data, true);
				$this.html(htmlArr.join(""));
				$this.data("config", method);
				bind()
			}
			var clickHandler = method.onClick;
			if (clickHandler) {
				$("li>a", $this).click(function() {
					var $link = $(this);
					attrs = $link.attr("data-attr");
					clickHandler.call(self, {
						id : $link.attr("data-id"),
						attributes : attrs ? JSON.parse(attrs) : {},
						text : $link.text()
					}, $link)
				})
			}
		}
		return $this
	}
})(jQuery);